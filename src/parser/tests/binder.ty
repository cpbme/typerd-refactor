local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")

local Maid = require(script.Maid)
local MaidTaskUtils = require(script.MaidTaskUtils)
local Signal = require(script.Signal)
local promiseBoundClass = require(script.promiseBoundClass)

local Binder = {}
Binder.__index = Binder
Binder.ClassName = "Binder"

local function isDescendantOfWhiteList(whitelist, instance)
	for _, descendant in ipairs(whitelist) do
		if instance:IsDescendantOf(descendant) then
			return true
		end
	end
	return false
end
function Binder.new(tagName, constructor, ...)
	local self = setmetatable({}, Binder)

	self._maid = Maid.new()
	self._tagName = tagName or error("Bad argument 'tagName', expected string")
	self._constructor = constructor or error("Bad argument 'constructor', expected table or function")

	self._instToClass = {}
	self._allClassSet = {}
	self._pendingInstSet = {}

	self._listeners = {}
	self._args = {...}

	task.delay(5, function()
		if not self._loaded then
			warn(("Binder %q is not loaded. Call :Start() on it!"):format(self._tagName))
		end
	end)

	return self
end

function Binder.isBinder(value)
	return type(value) == "table"
		and type(value.Start) == "function"
		and type(value.GetTag) == "function"
		and type(value.GetConstructor) == "function"
		and type(value.ObserveInstance) == "function"
		and type(value.GetClassAddedSignal) == "function"
		and type(value.GetClassRemovingSignal) == "function"
		and type(value.GetClassRemovedSignal) == "function"
		and type(value.GetAll) == "function"
		and type(value.GetAllSet) == "function"
		and type(value.Bind) == "function"
		and type(value.Unbind) == "function"
		and type(value.BindClient) == "function"
		and type(value.UnbindClient) == "function"
		and type(value.Get) == "function"
		and type(value.Promise) == "function"
		and type(value.Destroy) == "function"
end

function Binder:SetDescendantsWhitelist(descendants)
	assert(typeof(descendants) == "table", "Bad table")
	if self._whitelist ~= nil then
		warn("[Binder.SetDescendantsWhitelist]: Attempt to override descendants whitelist")
		return
	end
	self._whitelist = descendants
end

function Binder:Start()
	if self._loaded then
		return
	end
	self._loaded = true

	for _, inst in pairs(CollectionService:GetTagged(self._tagName)) do
		task.spawn(self._add, self, inst)
	end

	self._maid:GiveTask(CollectionService:GetInstanceAddedSignal(self._tagName):Connect(function(inst)
		local canAdd = self._whitelist == nil
		if not canAdd and isDescendantOfWhiteList(self._whitelist, inst) then
			canAdd = true
		end
		if canAdd then
			self:_add(inst)
		end
	end))
	self._maid:GiveTask(CollectionService:GetInstanceRemovedSignal(self._tagName):Connect(function(inst)
		local canRemove = self._whitelist == nil
		if not canRemove and isDescendantOfWhiteList(self._whitelist, inst) then
			canRemove = true
		end
		if canRemove then
			self:_remove(inst)
		end
	end))
end

function Binder:GetTag()
	return self._tagName
end

function Binder:GetConstructor()
	return self._constructor
end

function Binder:ObserveInstance(inst, callback)
	self._listeners[inst] = self._listeners[inst] or {}
	self._listeners[inst][callback] = true

	return function()
		if not self._listeners[inst] then
			return
		end

		self._listeners[inst][callback] = nil
		if not next(self._listeners[inst]) then
			self._listeners[inst] = nil
		end
	end
end

function Binder:GetClassAddedSignal()
	if self._classAddedSignal then
		return self._classAddedSignal
	end

	self._classAddedSignal = Signal.new()
	self._maid:GiveTask(self._classAddedSignal)
	return self._classAddedSignal
end

function Binder:GetClassRemovingSignal()
	if self._classRemovingSignal then
		return self._classRemovingSignal
	end

	self._classRemovingSignal = Signal.new()
	self._maid:GiveTask(self._classRemovingSignal)

	return self._classRemovingSignal
end

function Binder:GetClassRemovedSignal()
	if self._classRemovedSignal then
		return self._classRemovedSignal
	end

	self._classRemovedSignal = Signal.new()
	self._maid:GiveTask(self._classRemovedSignal)

	return self._classRemovedSignal
end

function Binder:GetAll()
	local all = {}
	for _class, _ in pairs(self._allClassSet) do
		all[#all+1] = _class
	end
	return all
end

function Binder:GetAllSet()
	return self._allClassSet
end

function Binder:Bind(inst)
	if RunService:IsClient() then
		warn(("[Binder.Bind] - Bindings '%s' done on the client! Will be disrupted upon server replication! %s")
			:format(self._tagName, debug.traceback()))
	end

	CollectionService:AddTag(inst, self._tagName)
	return self:Get(inst)
end

function Binder:Unbind(inst)
	assert(typeof(inst) == "Instance", "Bad inst'")

	if RunService:IsClient() then
		warn(("[Binder.Bind] - Unbinding '%s' done on the client! Might be disrupted upon server replication! %s")
			:format(self._tagName, debug.traceback()))
	end

	CollectionService:RemoveTag(inst, self._tagName)
end

function Binder:BindClient(inst)
	if not RunService:IsClient() then
		warn(("[Binder.BindClient] - Bindings '%s' done on the server! Will be replicated!")
			:format(self._tagName))
	end

	CollectionService:AddTag(inst, self._tagName)
	return self:Get(inst)
end

function Binder:UnbindClient(inst)
	assert(typeof(inst) == "Instance", "Bad inst")
	CollectionService:RemoveTag(inst, self._tagName)
end

function Binder:Get(inst)
	assert(typeof(inst) == "Instance", "Argument 'inst' is not an Instance")
	return self._instToClass[inst]
end

function Binder:Promise(inst)
	assert(typeof(inst) == "Instance", "Argument 'inst' is not an Instance")
	return promiseBoundClass(self, inst)
end

function Binder:_add(inst)
	assert(typeof(inst) == "Instance", "Argument 'inst' is not an Instance")

	if self._instToClass[inst] then
		return
	end

	if self._pendingInstSet[inst] == true then
		warn("[Binder._add] - Reentered add. Still loading, probably caused by error in constructor.")
		return
	end

	self._pendingInstSet[inst] = true

	local _class
	if type(self._constructor) == "function" then
		_class = self._constructor(inst, unpack(self._args))
	elseif self._constructor.Create then
		_class = self._constructor:Create(inst, unpack(self._args))
	else
		_class = self._constructor.new(inst, unpack(self._args))
	end

	if self._pendingInstSet[inst] ~= true then
		warn(("[Binder._add] - Failed to load instance %q of %q, removed while loading!")
			:format(
				inst:GetFullName(),
				tostring(type(self._constructor) == "table" and self._constructor.ClassName or self._constructor)))
		return
	end

	self._pendingInstSet[inst] = nil
	assert(self._instToClass[inst] == nil, "Overwrote")

	_class = _class or {}

	self._allClassSet[_class] = true
	self._instToClass[inst] = _class

	local listeners = self._listeners[inst]
	if listeners then
		for callback, _ in pairs(listeners) do
			task.spawn(callback, _class)
		end
	end

	if self._classAddedSignal then
		self._classAddedSignal:Fire(_class, inst)
	end
end

function Binder:_remove(inst)
	self._pendingInstSet[inst] = nil

	local _class = self._instToClass[inst]
	if _class == nil then
		return
	end

	if self._classRemovingSignal then
		self._classRemovingSignal:Fire(_class, inst)
	end

	self._instToClass[inst] = nil
	self._allClassSet[_class] = nil

	local listeners = self._listeners[inst]
	if listeners then
		for callback, _ in pairs(listeners) do
			task.spawn(callback, nil)
		end
	end

	if MaidTaskUtils.isValidTask(_class) then
		MaidTaskUtils.doTask(_class)
	end

	if self._classRemovedSignal then
		self._classRemovedSignal:Fire(_class, inst)
	end
end

function Binder:Destroy()
	local inst, _class = next(self._instToClass)
	while _class ~= nil do
		self:_remove(inst)
		assert(self._instToClass[inst] == nil, "Failed to remove")

		inst, _class = next(self._instToClass)
	end

	self._maid:DoCleaning()
end

return Binder
